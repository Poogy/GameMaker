<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle System
physics_particle_set_radius(5);
physics_particle_set_gravity_scale(0.1);
physics_particle_set_max_count(1900);
flags = phy_particle_flag_water|phy_particle_flag_tensile;
physics_particle_group_begin(flags,0,x,y,0,0,0,0,c_white,1,1,1);
physics_particle_group_box(208,128);
physics_particle_group_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Particles
physics_particle_create(flags,x,y,5-random(10),5-random(10),c_white,1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var count = physics_particle_count();
var dataFlags = phy_particle_data_flag_position | phy_particle_data_flag_velocity;
var heat = 50; //Color threshold limit - lower numbers for less, higher for more red
draw_set_blend_mode(bm_normal);

if (count &gt; 0)
{
    var buffer = buffer_create(count * 4,buffer_grow, 4);
    physics_particle_get_data(buffer,dataFlags);
    for (var n = 0; n &lt; count; n++)
    {
        var xx = buffer_read(buffer,buffer_f32);
        var yy = buffer_read(buffer,buffer_f32);
        var xvel = buffer_read(buffer,buffer_f32); //xVelocity
        var yvel = buffer_read(buffer,buffer_f32); //yVelocity
        var vres = sqrt(abs((xvel^2)+(yvel^2))); //vResort
        var vcol = vres;
        var dir = -1*radtodeg(arctan2(yvel,xvel))+90;
        if (vres &gt; heat)
        {
            vcol = heat;
        }
        col = make_colour_rgb(255,(vcol/heat)*240+15,0);
        if (vres &gt;= 8)
        {
            draw_sprite_ext(spr_dropBack,0,xx,yy,1/(vres/8),.75+.25/(vres/8),dir,col,1);
        }
        else
        {
            draw_sprite_ext(spr_dropBack,0,xx,yy,1,1,dir,col,1);
        }
    }
    buffer_delete(buffer);
}

if (count &gt; 0)
{
    var buffer = buffer_create(count * 4,buffer_grow, 4);
    physics_particle_get_data(buffer,dataFlags);
    for (var n = 0; n &lt; count; n++)
    {
        draw_set_blend_mode(bm_add);
        var xx = buffer_read(buffer,buffer_f32);
        var yy = buffer_read(buffer,buffer_f32);
        var xvel = buffer_read(buffer,buffer_f32); //xVelocity
        var yvel = buffer_read(buffer,buffer_f32); //yVelocity
        var vres = sqrt(abs((xvel^2)+(yvel^2))); //vResort
        var vcol = vres;
        var dir = -1*radtodeg(arctan2(yvel,xvel))+90;
        if (vres &gt; heat)
        {
            vcol = heat;
        }
        col = make_colour_rgb(255,(vcol/heat)*240+15,0);
        if (vres &gt;= 8)
        {
            draw_sprite_ext(spr_drop,0,xx,yy,1/(vres/8),.75+.25/(vres/8),dir,col,1);
        }
        else
        {
            draw_sprite_ext(spr_drop,0,xx,yy,1,1,dir,col,1);
        }
    }
    buffer_delete(buffer);
}
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
